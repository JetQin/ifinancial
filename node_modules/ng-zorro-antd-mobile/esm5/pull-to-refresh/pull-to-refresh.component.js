import { __decorate, __metadata } from "tslib";
import { Input, Output, Component, ViewChild, forwardRef, TemplateRef, HostBinding, EventEmitter, HostListener, ViewContainerRef, ViewEncapsulation, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var PullToRefreshComponent = /** @class */ (function () {
    function PullToRefreshComponent(ele) {
        this.ele = ele;
        this.transtionCls = {};
        this.style = {
            '-webkit-transform': 'translate3d( 0, 0, 0 )',
            transform: 'translate3d( 0, 0, 0 )'
        };
        this.state = {
            currentState: 'deactivate',
            drag: false
        };
        this._headerIndicator = {
            activate: '松开立即刷新',
            deactivate: '下拉可以刷新',
            release: '刷新中。。。',
            finish: '完成刷新'
        };
        this._footerIndicator = {
            activate: '松开立即刷新',
            deactivate: '上拉可以刷新',
            release: '刷新中。。。',
            finish: '完成刷新'
        };
        this._startTime = 0;
        this._endTime = 0;
        this._endReach = false;
        this._direction = '';
        this._clientHeight = 0;
        this._currentContentHeight = 0;
        this._lastContentOffset = 0;
        this.distanceToRefresh = 25; //触发刷新距离
        this.damping = 100; // 下拉的最大距离
        this.endReachedRefresh = false;
        this.refreshing = false;
        this.onRefresh = new EventEmitter();
        this.refresh = true;
        this.container = true;
        this.refreshUp = this._direction === 'up' || this._direction === '';
        this.refreshDown = this._direction === 'down' || this._direction === '';
    }
    PullToRefreshComponent_1 = PullToRefreshComponent;
    Object.defineProperty(PullToRefreshComponent.prototype, "direction", {
        get: function () {
            return this._direction;
        },
        set: function (value) {
            this._direction = value;
            this.refreshUp = this._direction === 'up' || this._direction === '';
            this.refreshDown = this._direction === 'down' || this._direction === '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PullToRefreshComponent.prototype, "headerIndicator", {
        get: function () {
            return this._headerIndicator;
        },
        set: function (value) {
            Object.assign(this._headerIndicator, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PullToRefreshComponent.prototype, "footerIndicator", {
        get: function () {
            return this._footerIndicator;
        },
        set: function (value) {
            Object.assign(this._footerIndicator, value);
        },
        enumerable: true,
        configurable: true
    });
    PullToRefreshComponent.prototype.touchstart = function (e) {
        this._startTime = Date.now();
        if (this._direction === 'down' || (this._direction === '' && !this._endReach)) {
            if (this.ele.nativeElement.scrollTop > 0) {
                this.startY = undefined;
                return;
            }
            this.startY = e && e.changedTouches && e.changedTouches[0] && e.changedTouches[0].clientY;
            this.state.drag = undefined;
        }
        else {
            this.startY = e && e.changedTouches && e.changedTouches[0] && e.changedTouches[0].clientY;
            this._clientHeight = this._pullToRefresh.element.nativeElement.clientHeight;
            this._currentContentHeight = this.ele.nativeElement.clientHeight;
        }
        this.transtionCls = '';
    };
    PullToRefreshComponent.prototype.touchmove = function (e) {
        if (this._direction === 'down' || (this._direction === '' && !this._endReach)) {
            if (this.ele.nativeElement.scrollTop > 0) {
                return;
            }
            var distanceY = e.changedTouches[0].clientY - this.startY;
            this.state.drag = distanceY >= 0;
            if (this.state.drag) {
                // 禁止滚动
                if (e.cancelable) {
                    e.preventDefault();
                }
            }
            else {
                return;
            }
            if (distanceY > this.damping) {
                //当超过设定阈值是，缓慢增加
                distanceY = (distanceY / (distanceY + this.damping)) * this.damping * 2;
            }
            else if (distanceY < 0) {
                distanceY = 0;
            }
            if (distanceY > this.distanceToRefresh) {
                this.state.currentState = 'activate';
                if (this._ngModelOnChange) {
                    this._ngModelOnChange(this.state);
                }
            }
            this.style = {
                '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
                transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
            };
        }
        else {
            var distanceY = e.changedTouches[0].clientY - this.startY;
            //向上拉动的时候，如果当前窗口内容没有滚到最后，则不实现拖动的动作；向下滚动不实现拖动动作
            if (Math.abs(this._lastContentOffset) < this._clientHeight - this._currentContentHeight - this.distanceToRefresh ||
                distanceY > 0) {
                // 滚动
                this.state.drag = false;
            }
            else {
                // 上拉
                this.state.drag = true;
            }
            if (this.state.drag) {
                // 禁止滚动
                if (e.cancelable) {
                    e.preventDefault();
                }
            }
            else {
                return;
            }
            //如果滑动到底部了，滑动距离随着拉动的距离增加缓慢增加
            distanceY = -(distanceY / (distanceY - this.damping)) * this.damping;
            if (Math.abs(distanceY) > this.distanceToRefresh) {
                this.state.currentState = 'activate';
                if (this._ngModelOnChange) {
                    this._ngModelOnChange(this.state);
                }
            }
            this.style = {
                '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
                transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
            };
        }
    };
    PullToRefreshComponent.prototype.touchend = function (e) {
        var _this = this;
        if (!this.startY || this.state.drag === false) {
            return;
        }
        var distanceY = e.changedTouches[0].clientY - this.startY;
        if (Math.abs(distanceY) >= this.distanceToRefresh) {
            this.state.currentState = 'release';
            if (this._direction === 'down' || (this._direction === '' && !this._endReach)) {
                this.translateY(this.distanceToRefresh + 1);
            }
            else {
                this.translateY(-this.distanceToRefresh - 1);
            }
            if (this._ngModelOnChange) {
                this._ngModelOnChange(this.state);
            }
            setTimeout(function () {
                _this.state.currentState = 'finish';
                if (_this._ngModelOnChange) {
                    _this._ngModelOnChange(_this.state);
                }
                if (_this._direction === 'down' || (_this._direction === '' && !_this._endReach)) {
                    _this.onRefresh.emit('down');
                }
                else {
                    _this.translateY(-_this.distanceToRefresh - 1);
                    _this.onRefresh.emit('up');
                }
                setTimeout(function () {
                    _this.state.currentState = 'deactivate';
                    if (_this._ngModelOnChange) {
                        _this._ngModelOnChange(_this.state);
                    }
                    _this.translateY(0);
                }, 0);
            }, 500);
        }
        else {
            this.translateY(0);
        }
    };
    PullToRefreshComponent.prototype.touchcancel = function () {
        this.translateY(0);
    };
    PullToRefreshComponent.prototype.scroll = function (evt) {
        var _this = this;
        this._endTime = Date.now();
        var contentOffset = evt.target.scrollTop;
        this._lastContentOffset = contentOffset;
        if (this._direction === '') {
            if (contentOffset > 0 && evt.target.scrollTop + this.ele.nativeElement.clientHeight === evt.target.scrollHeight) {
                setTimeout(function () {
                    _this._endReach = true;
                }, 100);
            }
            else {
                this._endReach = false;
            }
        }
        if (!this.endReachedRefresh || this._direction !== 'down') {
            return;
        }
        if (contentOffset > 0 &&
            evt.target.scrollTop + this.ele.nativeElement.clientHeight > evt.target.scrollHeight - this.distanceToRefresh &&
            this._endTime - this._startTime >= 100) {
            this._startTime = this._endTime;
            if (this.refreshing) {
                this.state.currentState = 'release';
                if (this._ngModelOnChange) {
                    this._ngModelOnChange(this.state);
                }
            }
            setTimeout(function () {
                if (_this.endReachedRefresh) {
                    _this.onRefresh.emit('endReachedRefresh');
                }
                if (_this.refreshing) {
                    _this.state.currentState = 'finish';
                    if (_this._ngModelOnChange) {
                        _this._ngModelOnChange(_this.state);
                    }
                }
            }, 500);
        }
        else {
            setTimeout(function () {
                if (_this.refreshing) {
                    _this.state.currentState = 'finish';
                    if (_this._ngModelOnChange) {
                        _this._ngModelOnChange(_this.state);
                    }
                }
            }, 500);
        }
    };
    PullToRefreshComponent.prototype.isTemplateRef = function (value) {
        return value instanceof TemplateRef;
    };
    PullToRefreshComponent.prototype.translateY = function (distanceY) {
        this.transtionCls = 'am-pull-to-refresh-transition';
        this.style = {
            '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
            transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
        };
    };
    PullToRefreshComponent.prototype.writeValue = function (value) {
        if (value !== null) {
            this.state = value;
        }
    };
    PullToRefreshComponent.prototype.registerOnChange = function (fn) {
        this._ngModelOnChange = fn;
    };
    PullToRefreshComponent.prototype.registerOnTouched = function (fn) {
        this._ngModelOnTouched = fn;
    };
    var PullToRefreshComponent_1;
    PullToRefreshComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('pullToRefresh', { read: ViewContainerRef, static: true }),
        __metadata("design:type", ViewContainerRef)
    ], PullToRefreshComponent.prototype, "_pullToRefresh", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PullToRefreshComponent.prototype, "distanceToRefresh", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PullToRefreshComponent.prototype, "damping", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PullToRefreshComponent.prototype, "endReachedRefresh", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PullToRefreshComponent.prototype, "refreshing", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PullToRefreshComponent.prototype, "direction", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PullToRefreshComponent.prototype, "headerIndicator", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PullToRefreshComponent.prototype, "footerIndicator", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PullToRefreshComponent.prototype, "onRefresh", void 0);
    __decorate([
        HostBinding('class.am-pull-to-refresh'),
        __metadata("design:type", Boolean)
    ], PullToRefreshComponent.prototype, "refresh", void 0);
    __decorate([
        HostBinding('class.super-container'),
        __metadata("design:type", Boolean)
    ], PullToRefreshComponent.prototype, "container", void 0);
    __decorate([
        HostBinding('class.am-pull-to-refresh-up'),
        __metadata("design:type", Boolean)
    ], PullToRefreshComponent.prototype, "refreshUp", void 0);
    __decorate([
        HostBinding('class.am-pull-to-refresh-down'),
        __metadata("design:type", Boolean)
    ], PullToRefreshComponent.prototype, "refreshDown", void 0);
    __decorate([
        HostListener('touchstart', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PullToRefreshComponent.prototype, "touchstart", null);
    __decorate([
        HostListener('touchmove', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PullToRefreshComponent.prototype, "touchmove", null);
    __decorate([
        HostListener('touchend', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PullToRefreshComponent.prototype, "touchend", null);
    __decorate([
        HostListener('touchcancel'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PullToRefreshComponent.prototype, "touchcancel", null);
    __decorate([
        HostListener('scroll', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PullToRefreshComponent.prototype, "scroll", null);
    PullToRefreshComponent = PullToRefreshComponent_1 = __decorate([
        Component({
            selector: 'PullToRefresh, nzm-pull-to-refresh',
            template: "<div class=\"am-pull-to-refresh-content-wrapper\">\n  <div class=\"am-pull-to-refresh-content\" [ngClass]=\"transtionCls\" [ngStyle]=\"style\">\n    <div *ngIf=\"refreshDown\" class=\"am-pull-to-refresh-indicator am-pull-to-refresh-header-indicator\">\n      <ng-template\n        *ngIf=\"isTemplateRef(headerIndicator[state.currentState])\"\n        [ngTemplateOutlet]=\"headerIndicator[state.currentState]\"\n      ></ng-template>\n      <ng-container *ngIf=\"!isTemplateRef(headerIndicator[state.currentState])\">{{\n        headerIndicator[state.currentState]\n      }}</ng-container>\n    </div>\n    <div #pullToRefresh>\n      <ng-content></ng-content>\n      <div\n        *ngIf=\"direction === 'down' && endReachedRefresh\"\n        class=\"am-pull-to-refresh-indicator am-pull-to-refresh-footer-indicator\"\n      >\n        <ng-template\n          *ngIf=\"isTemplateRef(footerIndicator[state.currentState])\"\n          [ngTemplateOutlet]=\"footerIndicator[state.currentState]\"\n        ></ng-template>\n        <ng-container *ngIf=\"!isTemplateRef(footerIndicator[state.currentState])\">{{\n          footerIndicator[state.currentState]\n        }}</ng-container>\n      </div>\n    </div>\n    <div *ngIf=\"refreshUp\" class=\"am-pull-to-refresh-indicator am-pull-to-refresh-footer-indicator\">\n      <ng-template\n        *ngIf=\"isTemplateRef(footerIndicator[state.currentState])\"\n        [ngTemplateOutlet]=\"footerIndicator[state.currentState]\"\n      ></ng-template>\n      <ng-container *ngIf=\"!isTemplateRef(footerIndicator[state.currentState])\">{{\n        footerIndicator[state.currentState]\n      }}</ng-container>\n    </div>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PullToRefreshComponent_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], PullToRefreshComponent);
    return PullToRefreshComponent;
}());
export { PullToRefreshComponent };
//# sourceMappingURL=data:application/json;base64,