import { __decorate, __extends, __metadata } from "tslib";
import { Input, Output, Component, forwardRef, HostBinding, EventEmitter, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatePickerComponent } from '../date-picker/date-picker.component';
import { DatePickerOptions } from '../date-picker/date-picker-options.provider';
var DatePickerViewComponent = /** @class */ (function (_super) {
    __extends(DatePickerViewComponent, _super);
    function DatePickerViewComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mode = 'date';
        _this.minDate = new Date(2000, 5, 1, 0, 0, 0);
        _this.maxDate = new Date(2030, 1, 1, 23, 59, 59);
        _this.value = new Date();
        _this.disabled = false;
        _this.indicatorStyle = {};
        _this.showErrorToast = true;
        _this.showErrorToastInterval = 2000;
        _this.onValueChange = new EventEmitter();
        _this.amPicker = true;
        return _this;
    }
    DatePickerViewComponent_1 = DatePickerViewComponent;
    Object.defineProperty(DatePickerViewComponent.prototype, "locale", {
        get: function () {
            return this.options.locale;
        },
        set: function (value) {
            this.options.locale = value;
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    DatePickerViewComponent.prototype.reloadPicker = function () {
        if (this.currentPicker) {
            var self_1 = this;
            setTimeout(function () {
                self_1.selectedTarget.forEach(function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                });
            }, 0);
        }
    };
    DatePickerViewComponent.prototype.writeValue = function (value) {
        if (value) {
            this.value = value;
            this.optionInit();
            this.init();
        }
    };
    DatePickerViewComponent.prototype.registerOnChange = function (fn) {
        this.ngModelOnChange = fn;
    };
    DatePickerViewComponent.prototype.registerOnTouched = function (fn) {
        this.ngModelOnTouched = fn;
    };
    DatePickerViewComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    DatePickerViewComponent.prototype.optionInit = function () {
        this.options.mode = this.mode;
        this.options.minDate = this.minDate;
        this.options.maxDate = this.maxDate;
        this.options.disabled = this.disabled;
        this.options.locale = this.locale;
        this.options.value = this.value;
        this.options.showErrorToast = this.showErrorToast;
        this.options.showErrorToastInterval = this.showErrorToastInterval;
        this.options.onValueChange = this.onValueChange;
        this.checkMode(this.options.mode);
        var value = this.transformDateFormat(this.options.value).split('-');
        if (value.length > 0) {
            this.currentTime = value.map(function (item) {
                return parseInt(item, 0);
            });
        }
    };
    DatePickerViewComponent.prototype.ngOnInit = function () {
        this.optionInit();
        this.localeProvider();
    };
    DatePickerViewComponent.prototype.ngAfterViewInit = function () {
        this.currentPicker = this.elementRef.nativeElement;
        this.reloadPicker();
    };
    DatePickerViewComponent.prototype.ngOnChanges = function (changes) {
        if (changes.value) {
            this.options.value = changes.value.currentValue;
            var value = this.transformDateFormat(this.options.value).split('-');
            if (value.length > 0) {
                this.currentTime = value.map(function (item) {
                    return parseInt(item, 0);
                });
            }
            if (!this.judgeEqualArray(this.currentTime, this.resultArr, this.resultArr.length) ||
                this.judgeEqualArray(this.currentTime, this.min_date, this.currentTime.length) ||
                this.judgeTime(this.currentTime, this.max_date)) {
                this.optionInit();
                this.init();
            }
        }
        if (changes.mode || changes.minDate || changes.maxDate || changes.disabled || changes.locale) {
            this.optionInit();
            this.init();
        }
    };
    var DatePickerViewComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DatePickerViewComponent.prototype, "mode", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatePickerViewComponent.prototype, "minDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatePickerViewComponent.prototype, "maxDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatePickerViewComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatePickerViewComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerViewComponent.prototype, "indicatorStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DatePickerViewComponent.prototype, "locale", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatePickerViewComponent.prototype, "showErrorToast", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DatePickerViewComponent.prototype, "showErrorToastInterval", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DatePickerViewComponent.prototype, "onValueChange", void 0);
    __decorate([
        HostBinding('class.am-picker'),
        __metadata("design:type", Object)
    ], DatePickerViewComponent.prototype, "amPicker", void 0);
    DatePickerViewComponent = DatePickerViewComponent_1 = __decorate([
        Component({
            selector: 'DatePickerView, nzm-date-picker-view',
            template: "<div *ngFor=\"let item of dataWithStr; let i = index\" class=\"am-picker-col\">\n  <div class=\"am-picker-col-indicator \" style=\"top: 102px;\" [ngStyle]=\"indicatorStyle\"></div>\n  <div id=\"{{ i }}\" class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\"></div>\n  <div class=\"am-picker-col-content\">\n    <div id=\"{{ i }}\" *ngFor=\"let val of item; let i = index\" class=\"am-picker-col-item\">\n      {{ val.label ? val.label : val }}\n    </div>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return DatePickerViewComponent_1; }),
                    multi: true
                },
                DatePickerOptions
            ]
        })
    ], DatePickerViewComponent);
    return DatePickerViewComponent;
}(DatePickerComponent));
export { DatePickerViewComponent };
//# sourceMappingURL=data:application/json;base64,