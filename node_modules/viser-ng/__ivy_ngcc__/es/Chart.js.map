{"version":3,"file":"Chart.js","sources":["Chart.js"],"names":[],"mappingswBAMO;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAc;AACd;AACA;AACA;AACA","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, Input, NgZone, ViewChild, ViewContainerRef } from '@angular/core';\nimport viser from 'viser';\nimport { ChartContext } from './chartService';\nfunction firstLowerCase(str) {\n    return str.replace(/^\\S/, function (s) {\n        return s.toLowerCase();\n    });\n}\nfunction generateRandomNum() {\n    return (Math.floor(new Date().getTime() + Math.random() * 10000)).toString();\n}\nfunction isOwnEmpty(obj) {\n    for (var name_1 in obj) {\n        if (obj.hasOwnProperty(name_1)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction retain(obj, attr) {\n    var newObj = Object.create(null);\n    for (var item in obj) {\n        if (obj.hasOwnProperty(item)) {\n            var arrAttr = Array.isArray(attr) ? attr : [attr];\n            if (arrAttr.indexOf(item) >= 0) {\n                newObj[item] = obj[item];\n            }\n        }\n    }\n    return newObj;\n}\nfunction omit(obj, attr) {\n    var newObj = Object.create(null);\n    for (var item in obj) {\n        if (obj.hasOwnProperty(item)) {\n            var arrAttr = Array.isArray(attr) ? attr : [attr];\n            if (arrAttr.indexOf(item) < 0) {\n                newObj[item] = obj[item];\n            }\n        }\n    }\n    return newObj;\n}\nfunction uniqComponentIdArray(configs) {\n    var componentIds = {};\n    var newConfigs = [];\n    for (var i = (configs.length - 1); i >= 0; i--) {\n        var config = configs[i];\n        if (!componentIds[config.componentId]) {\n            newConfigs.push(config);\n            componentIds[config.componentId] = true;\n        }\n    }\n    newConfigs.sort(function (ca, cb) {\n        return parseInt(ca.componentId, 10) - parseInt(cb.componentId, 10);\n    });\n    return newConfigs;\n}\nvar Chart = (function () {\n    function Chart(context, elem, vcRef, ngZone) {\n        this.context = context;\n        this.ngZone = ngZone;\n        this.viewId = generateRandomNum();\n        this.componentId = generateRandomNum();\n        this.context = context;\n        this.elem = elem;\n        this.vcRef = vcRef;\n        var name = this.getComponentName();\n        var viewType = this.getViewType();\n        var hasInViews = ['v-facet-view', 'v-view'].indexOf(viewType) !== -1;\n        if (['FacetView', 'View'].indexOf(name) > -1) {\n            this.context.lastFacetId = this.viewId || this.componentId;\n        }\n        else if (hasInViews) {\n            this.viewId = this.context.lastFacetId;\n        }\n    }\n    Chart.prototype.ngAfterViewInit = function () {\n        if (this.context.chart) {\n            this.context.chart.destroy();\n        }\n        this.initChart();\n    };\n    Chart.prototype.ngOnChanges = function (changes) {\n        this.initChart(true);\n    };\n    Chart.prototype.combineViewConfig = function (props, config) {\n        if (props.data) {\n            config.data = props.data;\n        }\n        if (props.scale) {\n            config.scale = props.scale;\n        }\n        if (props.start) {\n            config.start = props.start;\n        }\n        if (props.end) {\n            config.end = props.end;\n        }\n    };\n    Chart.prototype.combineChartConfig = function (props, config) {\n        var chartRetain = [\n            'height', 'width', 'animate', 'forceFit',\n            'background', 'plotBackground', 'padding', 'theme', 'renderer',\n            'onMouseDown', 'onMouseMove', 'onMouseUp',\n            'onClick', 'onDblClick',\n            'onTouchStart', 'onTouchMove', 'onTouchEnd',\n            'onPlotEnter', 'onPlotMove', 'onPlotLeave',\n            'onPlotClick', 'onPlotDblClick',\n        ];\n        config.chart = retain(props, chartRetain);\n    };\n    Chart.prototype.convertValueToNum = function (props) {\n        var numberProps = {};\n        var numberKeys = ['radius', 'innerRadius', 'size', 'offsetX', 'offsetY', 'cols', 'padding',\n            'opacity', 'startAngle', 'endAngle'];\n        Object.keys(props).forEach(function (propKey) {\n            if (numberKeys.indexOf(propKey) > -1) {\n                if (typeof props[propKey] === 'string') {\n                    var value = parseFloat(props[propKey]);\n                    value = isNaN(value) ? props[propKey] : value;\n                    numberProps[propKey] = value;\n                }\n            }\n        });\n        return numberProps;\n    };\n    Chart.prototype.combineContentConfig = function (displayName, props, config) {\n        var realName = firstLowerCase(displayName);\n        var nameLowerCase = displayName.toLowerCase();\n        var regSeries = [\n            'pie',\n            'sector',\n            'line',\n            'smoothLine',\n            'dashLine',\n            'area',\n            'stackArea',\n            'smoothArea',\n            'bar',\n            'stackBar',\n            'dodgeBar',\n            'interval',\n            'stackInterval',\n            'dodgeInterval',\n            'point',\n            'funnel',\n            'pyramid',\n            'schema',\n            'box',\n            'candle',\n            'polygon',\n            'contour',\n            'heatmap',\n            'edge',\n            'sankey',\n            'errorBar',\n            'jitterPoint',\n            'path',\n            'venn',\n        ];\n        if (regSeries.indexOf(realName) < 0 && isOwnEmpty(props)) {\n            config[nameLowerCase] = true;\n        }\n        else if (regSeries.indexOf(realName) >= 0) {\n            if (!config.series) {\n                config.series = [];\n            }\n            config.series.push(__assign({ quickType: realName }, props, { componentId: this.componentId }));\n            config.series = uniqComponentIdArray(config.series);\n        }\n        else if (nameLowerCase === 'axis') {\n            if (!config.axis) {\n                config.axis = [];\n            }\n            config.axis.push(__assign({}, props, { componentId: this.componentId }));\n            config.axis = uniqComponentIdArray(config.axis);\n        }\n        else if (nameLowerCase === 'series') {\n            if (!config.series) {\n                config.series = [];\n            }\n            config.series.push(__assign({}, props, { componentId: this.componentId }));\n            config.series = uniqComponentIdArray(config.series);\n        }\n        else if (nameLowerCase === 'guide') {\n            if (!config.guide) {\n                config.guide = [];\n            }\n            config.guide.push(__assign({}, props, { componentId: this.componentId }));\n            config.guide = uniqComponentIdArray(config.guide);\n        }\n        else if (nameLowerCase === 'legend') {\n            if (!config.legend) {\n                config.legend = [];\n            }\n            config.legend.push(__assign({}, props, { componentId: this.componentId }));\n            config.legend = uniqComponentIdArray(config.legend);\n        }\n        else {\n            config[nameLowerCase] = props;\n        }\n        return config;\n    };\n    Chart.prototype.changeViewConfig = function () {\n        var views = this.context.views;\n        var facetviews = this.context.facetviews;\n        var config = this.context.config;\n        if (!isOwnEmpty(views)) {\n            config.views = [];\n            for (var item in views) {\n                if (views.hasOwnProperty(item)) {\n                    config.views.push(views[item]);\n                }\n            }\n        }\n        if (!isOwnEmpty(facetviews)) {\n            config.facet.views = [];\n            for (var item in facetviews) {\n                if (facetviews.hasOwnProperty(item)) {\n                    config.facet.views.push(facetviews[item]);\n                }\n            }\n        }\n    };\n    Chart.prototype.getProps = function (allProps) {\n        var strippingProperties = ['chart', 'chartDiv', 'config', 'context', 'viewId', 'facetviews',\n            'componentId', 'elem', 'vcRef', 'constructor', 'combineViewConfig', 'convertValueToNum',\n            'combineChartConfig', 'combineContentConfig', 'ngOnInit', 'ngAfterViewInit', 'getProps',\n            'changeViewConfig', 'getViewType', 'getViewChartConfig', 'initChart', 'ngOnChanges', 'renderChart'];\n        if (['FacetView', 'View'].indexOf(this.getComponentName()) < 0) {\n            strippingProperties.push('viewId');\n        }\n        if (allProps) {\n            var properties = {};\n            for (var key in allProps) {\n                if (strippingProperties.indexOf(key) === -1) {\n                    properties[key] = allProps[key];\n                }\n            }\n            var numberProps = this.convertValueToNum(properties);\n            return __assign({}, properties, numberProps);\n        }\n        return allProps;\n    };\n    Chart.prototype.getViewType = function () {\n        return this.vcRef.parentInjector.elDef.element.name;\n    };\n    Chart.prototype.getComponentName = function () {\n        var viewName = this.elem.nativeElement.tagName.toLowerCase();\n        var names = viewName.split('-');\n        names.shift();\n        var upperCaseNames = names.map(function (name) {\n            return name.charAt(0).toUpperCase() + name.slice(1);\n        });\n        return upperCaseNames.join('');\n    };\n    Chart.prototype.initChart = function (rerender) {\n        var name = this.getComponentName();\n        var props = this.getProps(this);\n        var config = this.context.config;\n        var viewType = this.getViewType();\n        var hasInViews = ['v-facet-view', 'v-view'].indexOf(viewType) !== -1;\n        var viewId = this.viewId || this.componentId;\n        if (name === 'Chart') {\n            this.combineChartConfig(props, this.context.config);\n            this.combineViewConfig(props, this.context.config);\n            this.renderChart(rerender);\n        }\n        else if (name === 'Facet') {\n            var options = omit(props, 'children');\n            config.facet = options;\n        }\n        else if (name === 'FacetView') {\n            if (!this.context.facetviews[viewId]) {\n                this.context.facetviews[viewId] = { viewId: viewId };\n            }\n            this.combineViewConfig(props, this.context.facetviews[viewId]);\n        }\n        else if (name === 'View') {\n            if (!this.context.views[viewId]) {\n                this.context.views[viewId] = { viewId: viewId };\n            }\n            this.combineViewConfig(props, this.context.views[viewId]);\n        }\n        else {\n            if (!hasInViews) {\n                this.combineContentConfig(name, props, config);\n            }\n            else {\n                if (viewType === 'v-view') {\n                    if (!this.context.views[viewId]) {\n                        this.context.views[viewId] = { viewId: viewId };\n                    }\n                    this.combineContentConfig(name, props, this.context.views[viewId]);\n                }\n                else if (viewType === 'v-facet-view') {\n                    if (!this.context.facetviews[viewId]) {\n                        this.context.facetviews[viewId] = { viewId: viewId };\n                    }\n                    this.combineContentConfig(name, props, this.context.facetviews[viewId]);\n                }\n            }\n        }\n        if (rerender) {\n            this.renderChart(true);\n        }\n    };\n    Chart.prototype.renderChart = function (rerender) {\n        var _this = this;\n        this.changeViewConfig();\n        var name = this.getComponentName();\n        if (rerender) {\n            if (this.context.timer) {\n                window.clearTimeout(this.context.timer);\n                this.context.timer = null;\n            }\n            this.context.timer = setTimeout(function () {\n                _this.ngZone.runOutsideAngular(function () {\n                    if (_this.context.chart) {\n                        _this.context.chart.repaint(_this.context.config);\n                    }\n                    else {\n                        _this.context.config.chart.container = _this.context.chartDivElement;\n                        _this.context.chart = viser(_this.context.config);\n                    }\n                });\n            }, 90);\n        }\n        else if (!this.context.chart && name === 'Chart') {\n            this.ngZone.runOutsideAngular(function () {\n                _this.context.config.chart.container = _this.chartDiv.nativeElement;\n                _this.context.chartDivElement = _this.chartDiv.nativeElement;\n                _this.context.chart = viser(_this.context.config);\n            });\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"data\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], Chart.prototype, \"height\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], Chart.prototype, \"width\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"animate\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Chart.prototype, \"forceFit\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"background\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"plotBackground\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"padding\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"scale\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], Chart.prototype, \"theme\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], Chart.prototype, \"renderer\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Chart.prototype, \"filter\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onMouseDown\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onMouseMove\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onMouseLeave\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onMouseUp\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onClick\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onDblClick\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onTouchStart\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onTouchMove\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onTouchEnd\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onPlotEnter\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onPlotMove\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onPlotLeave\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onPlotClick\");\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], Chart.prototype, \"onPlotDblClick\");\n    __decorate([\n        ViewChild('chartDom', { static: true }),\n        __metadata(\"design:type\", ElementRef)\n    ], Chart.prototype, \"chartDiv\");\n    Chart = __decorate([\n        Component({\n            providers: [ChartContext],\n            selector: 'v-chart',\n            template: \"<div #chartDom></div>\",\n        }),\n        __metadata(\"design:paramtypes\", [ChartContext, ElementRef, ViewContainerRef, NgZone])\n    ], Chart);\n    return Chart;\n}());\nexport { Chart };\n"]}