import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ViewContainerRef } from '@angular/core';
import * as viser from 'viser';
import { PluginContext } from './PluginService';
var PluginComponent = (function () {
    function PluginComponent(context, vcRef) {
        this.config = {};
        this.context = context;
        this.vcRef = vcRef;
    }
    PluginComponent.prototype.ngAfterViewInit = function () {
        this.initPlugin();
    };
    PluginComponent.prototype.ngOnChanges = function (changes) {
        this.initPlugin();
    };
    PluginComponent.prototype.combineContentConfig = function (displayName, props, config) {
        var nameLowerCase = displayName.toLowerCase();
        config[nameLowerCase] = props;
    };
    PluginComponent.prototype.getProps = function (allProps) {
        var strippingProperties = ['chartDiv', 'combineContentConfig', 'config', 'constructor', 'context', 'vcRef',
            'getProps', 'initPlugin', 'renderPlugin',
            'ngOnInit', 'ngAfterViewInit', 'ngOnChanges'];
        if (allProps) {
            var properties = {};
            for (var key in allProps) {
                if (strippingProperties.indexOf(key) === -1) {
                    properties[key] = allProps[key];
                }
            }
            return properties;
        }
        return allProps;
    };
    PluginComponent.prototype.initPlugin = function () {
        var name = this.constructor.name;
        var props = this.getProps(this);
        this.config = this.context.config;
        if (name === 'PluginComponent') {
            this.renderPlugin(true);
        }
        else if (name === 'Slider') {
            props.container = this.context.container;
            this.combineContentConfig(name, props, this.config);
        }
    };
    PluginComponent.prototype.renderPlugin = function (rerender) {
        viser.Plugin(this.config);
    };
    PluginComponent = __decorate([ __metadata("design:paramtypes", [PluginContext, ViewContainerRef])
    ], PluginComponent);
PluginComponent.ɵfac = function PluginComponent_Factory(t) { return new (t || PluginComponent)(ɵngcc0.ɵɵdirectiveInject(PluginContext), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
PluginComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PluginComponent, selectors: [["v-plugin"]], features: [ɵngcc0.ɵɵProvidersFeature([PluginContext]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, template: function PluginComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelement(1, "v-slider");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PluginComponent, [{
        type: Component,
        args: [{
                providers: [PluginContext],
                selector: 'v-plugin',
                template: "<div>\n    <v-slider></v-slider>\n  </div>"
            }]
    }], function () { return [{ type: PluginContext }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return PluginComponent;
}());
export { PluginComponent };

//# sourceMappingURL=Plugin.js.map