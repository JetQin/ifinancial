{"version":3,"file":"Plugin.js","sources":["Plugin.js"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAMO;AACP;;;;;;;;;;;;;;0GAAwB;AACxB;AACA;AACA;AACA","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewContainerRef } from '@angular/core';\nimport * as viser from 'viser';\nimport { PluginContext } from './PluginService';\nvar PluginComponent = (function () {\n    function PluginComponent(context, vcRef) {\n        this.config = {};\n        this.context = context;\n        this.vcRef = vcRef;\n    }\n    PluginComponent.prototype.ngAfterViewInit = function () {\n        this.initPlugin();\n    };\n    PluginComponent.prototype.ngOnChanges = function (changes) {\n        this.initPlugin();\n    };\n    PluginComponent.prototype.combineContentConfig = function (displayName, props, config) {\n        var nameLowerCase = displayName.toLowerCase();\n        config[nameLowerCase] = props;\n    };\n    PluginComponent.prototype.getProps = function (allProps) {\n        var strippingProperties = ['chartDiv', 'combineContentConfig', 'config', 'constructor', 'context', 'vcRef',\n            'getProps', 'initPlugin', 'renderPlugin',\n            'ngOnInit', 'ngAfterViewInit', 'ngOnChanges'];\n        if (allProps) {\n            var properties = {};\n            for (var key in allProps) {\n                if (strippingProperties.indexOf(key) === -1) {\n                    properties[key] = allProps[key];\n                }\n            }\n            return properties;\n        }\n        return allProps;\n    };\n    PluginComponent.prototype.initPlugin = function () {\n        var name = this.constructor.name;\n        var props = this.getProps(this);\n        this.config = this.context.config;\n        if (name === 'PluginComponent') {\n            this.renderPlugin(true);\n        }\n        else if (name === 'Slider') {\n            props.container = this.context.container;\n            this.combineContentConfig(name, props, this.config);\n        }\n    };\n    PluginComponent.prototype.renderPlugin = function (rerender) {\n        viser.Plugin(this.config);\n    };\n    PluginComponent = __decorate([\n        Component({\n            providers: [PluginContext],\n            selector: 'v-plugin',\n            template: \"<div>\\n    <v-slider></v-slider>\\n  </div>\",\n        }),\n        __metadata(\"design:paramtypes\", [PluginContext, ViewContainerRef])\n    ], PluginComponent);\n    return PluginComponent;\n}());\nexport { PluginComponent };\n"]}