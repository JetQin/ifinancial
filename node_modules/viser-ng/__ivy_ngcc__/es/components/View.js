import * as ɵngcc0 from '@angular/core';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { Chart } from '../Chart';
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], View.prototype, "data");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], View.prototype, "dataPre");
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], View.prototype, "scale");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], View.prototype, "dataView");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], View.prototype, "start");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], View.prototype, "end");
View.ɵfac = function View_Factory(t) { return ɵView_BaseFactory(t || View); };
View.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: View, selectors: [["v-view"]], inputs: { data: "data", dataPre: "dataPre", scale: "scale", dataView: "dataView", start: "start", end: "end" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [["chartDom", ""]], template: function View_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
var ɵView_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(View);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(View, [{
        type: Component,
        args: [{
                selector: 'v-view',
                template: "<div #chartDom></div>"
            }]
    }], null, { data: [{
            type: Input
        }], dataPre: [{
            type: Input
        }], scale: [{
            type: Input
        }], dataView: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }] }); })();
    return View;
}(Chart));
var FacetView = (function (_super) {
    __extends(FacetView, _super);
    function FacetView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FacetView.prototype, "dataPre");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FacetView.prototype, "dataView");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FacetView.prototype, "scale");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FacetView.prototype, "filter");
FacetView.ɵfac = function FacetView_Factory(t) { return ɵFacetView_BaseFactory(t || FacetView); };
FacetView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FacetView, selectors: [["v-facet-view"]], inputs: { dataPre: "dataPre", dataView: "dataView", scale: "scale", filter: "filter" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [["chartDom", ""]], template: function FacetView_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
var ɵFacetView_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FacetView);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FacetView, [{
        type: Component,
        args: [{
                selector: 'v-facet-view',
                template: "<div #chartDom></div>"
            }]
    }], null, { dataPre: [{
            type: Input
        }], dataView: [{
            type: Input
        }], scale: [{
            type: Input
        }], filter: [{
            type: Input
        }] }); })();
    return FacetView;
}(Chart));
export { View, FacetView };

//# sourceMappingURL=View.js.map