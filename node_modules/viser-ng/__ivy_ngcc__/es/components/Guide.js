import * as ɵngcc0 from '@angular/core';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { Chart } from '../Chart';
import * as Style from './Style';
var Guide = (function (_super) {
    __extends(Guide, _super);
    function Guide() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "type");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Guide.prototype, "top");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Guide.prototype, "zIndex");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "start");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "end");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "position");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "lineStyle");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "content");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "style");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "text");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "src");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Guide.prototype, "width");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Guide.prototype, "height");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Guide.prototype, "offsetX");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Guide.prototype, "offsetY");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "alignX");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "alignY");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "html");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "color");
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], Guide.prototype, "apply");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Guide.prototype, "lineLength");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Guide.prototype, "direction");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Guide.prototype, "display");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onMouseDown");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onMouseMove");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onMouseLeave");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onMouseUp");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onClick");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onDblClick");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onTouchStart");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onTouchMove");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Guide.prototype, "onTouchEnd");
Guide.ɵfac = function Guide_Factory(t) { return ɵGuide_BaseFactory(t || Guide); };
Guide.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Guide, selectors: [["v-guide"]], inputs: { type: "type", top: "top", zIndex: "zIndex", start: "start", end: "end", position: "position", lineStyle: "lineStyle", content: "content", style: "style", text: "text", src: "src", width: "width", height: "height", offsetX: "offsetX", offsetY: "offsetY", alignX: "alignX", alignY: "alignY", html: "html", color: "color", apply: "apply", lineLength: "lineLength", direction: "direction", display: "display", onMouseDown: "onMouseDown", onMouseMove: "onMouseMove", onMouseLeave: "onMouseLeave", onMouseUp: "onMouseUp", onClick: "onClick", onDblClick: "onDblClick", onTouchStart: "onTouchStart", onTouchMove: "onTouchMove", onTouchEnd: "onTouchEnd" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [["chartDom", ""]], template: function Guide_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
var ɵGuide_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Guide);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Guide, [{
        type: Component,
        args: [{
                selector: 'v-guide',
                template: "<div #chartDom></div>"
            }]
    }], null, { type: [{
            type: Input
        }], top: [{
            type: Input
        }], zIndex: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], position: [{
            type: Input
        }], lineStyle: [{
            type: Input
        }], content: [{
            type: Input
        }], style: [{
            type: Input
        }], text: [{
            type: Input
        }], src: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], offsetX: [{
            type: Input
        }], offsetY: [{
            type: Input
        }], alignX: [{
            type: Input
        }], alignY: [{
            type: Input
        }], html: [{
            type: Input
        }], color: [{
            type: Input
        }], apply: [{
            type: Input
        }], lineLength: [{
            type: Input
        }], direction: [{
            type: Input
        }], display: [{
            type: Input
        }], onMouseDown: [{
            type: Input
        }], onMouseMove: [{
            type: Input
        }], onMouseLeave: [{
            type: Input
        }], onMouseUp: [{
            type: Input
        }], onClick: [{
            type: Input
        }], onDblClick: [{
            type: Input
        }], onTouchStart: [{
            type: Input
        }], onTouchMove: [{
            type: Input
        }], onTouchEnd: [{
            type: Input
        }] }); })();
    return Guide;
}(Chart));
export { Guide };

//# sourceMappingURL=Guide.js.map