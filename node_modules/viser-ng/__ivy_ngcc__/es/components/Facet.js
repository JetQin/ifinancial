import * as ɵngcc0 from '@angular/core';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { Chart } from '../Chart';
import * as IStyle from './Style';
var Facet = (function (_super) {
    __extends(Facet, _super);
    function Facet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Facet.prototype, "type");
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], Facet.prototype, "fields");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Facet.prototype, "cols");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Facet.prototype, "rows");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "colField");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "rowField");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Facet.prototype, "colValue");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Facet.prototype, "rowValue");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Facet.prototype, "colIndex");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], Facet.prototype, "rowIndex");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Facet.prototype, "showTitle");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "colTitle");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "rowTitle");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Facet.prototype, "autoSetAxis");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "padding");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Facet.prototype, "transpose");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Facet.prototype, "lineSmooth");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "line");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], Facet.prototype, "views");
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], Facet.prototype, "eachView");
Facet.ɵfac = function Facet_Factory(t) { return ɵFacet_BaseFactory(t || Facet); };
Facet.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Facet, selectors: [["v-facet"]], inputs: { type: "type", fields: "fields", cols: "cols", rows: "rows", colField: "colField", rowField: "rowField", colValue: "colValue", rowValue: "rowValue", colIndex: "colIndex", rowIndex: "rowIndex", showTitle: "showTitle", colTitle: "colTitle", rowTitle: "rowTitle", autoSetAxis: "autoSetAxis", padding: "padding", transpose: "transpose", lineSmooth: "lineSmooth", line: "line", views: "views", eachView: "eachView" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [["chartDom", ""]], template: function Facet_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
var ɵFacet_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Facet);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Facet, [{
        type: Component,
        args: [{
                selector: 'v-facet',
                template: "<div #chartDom></div>"
            }]
    }], null, { type: [{
            type: Input
        }], fields: [{
            type: Input
        }], cols: [{
            type: Input
        }], rows: [{
            type: Input
        }], colField: [{
            type: Input
        }], rowField: [{
            type: Input
        }], colValue: [{
            type: Input
        }], rowValue: [{
            type: Input
        }], colIndex: [{
            type: Input
        }], rowIndex: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], colTitle: [{
            type: Input
        }], rowTitle: [{
            type: Input
        }], autoSetAxis: [{
            type: Input
        }], padding: [{
            type: Input
        }], transpose: [{
            type: Input
        }], lineSmooth: [{
            type: Input
        }], line: [{
            type: Input
        }], views: [{
            type: Input
        }], eachView: [{
            type: Input
        }] }); })();
    return Facet;
}(Chart));
export { Facet };

//# sourceMappingURL=Facet.js.map