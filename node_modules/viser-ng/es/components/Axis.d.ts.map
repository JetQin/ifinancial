{"version":3,"file":"Axis.d.ts","sources":["Axis.d.ts"],"names":[],"mappingssourcesContent":["import { Chart } from '../Chart';\nimport * as IStyle from './Style';\ndeclare type formatterFunc = (val: string | number) => string | number;\ndeclare type eventFunc = (ev: any, chart: any) => void;\ninterface ITitle {\n    autoRotate?: boolean;\n    offset?: number;\n    position?: string;\n    textStyle?: IStyle.ITextStyle;\n}\ninterface IAxisTick {\n    ticks?: number[];\n    tickCount?: number;\n    tickInterval?: number;\n}\ninterface IAxisGrid {\n    zIndex?: number;\n    type?: string;\n    align?: string;\n    lineStyle?: IStyle.ILineStyle;\n    line?: IStyle.ILineStyle;\n    items?: object[];\n    alternateColor?: string | string[];\n    matrix?: any;\n    hideFirstLine?: boolean;\n    hideLastLine?: boolean;\n}\ninterface IAxisLabel {\n    density: number;\n    offset?: number | number[];\n    formatter?: string | formatterFunc;\n    autoRotate?: boolean;\n    rotate?: number | 'normal' | 'parallel';\n    textStyle?: IStyle.ITextStyle;\n    htmlTemplate?: (text: any, item: any, index: any) => string;\n}\ndeclare class Axis extends Chart {\n    dataKey?: string;\n    show?: boolean;\n    position?: string;\n    title?: ITitle;\n    tick?: IAxisTick;\n    subTick?: IAxisTick;\n    grid?: IAxisGrid | null;\n    zIndex?: number;\n    label?: boolean | IAxisLabel;\n    line?: IStyle.ILineStyle;\n    tickLine?: IStyle.ILineStyle;\n    subTickCount?: number;\n    subTickLine?: IStyle.ILineStyle;\n    autoPaint?: boolean;\n    useHtml?: boolean;\n    onTitleMouseDown?: eventFunc;\n    onTitleMouseMove?: eventFunc;\n    onTitleMouseLeave?: eventFunc;\n    onTitleMouseUp?: eventFunc;\n    onTitleClick?: eventFunc;\n    onTitleDblClick?: eventFunc;\n    onTitleTouchStart?: eventFunc;\n    onTitleTouchMove?: eventFunc;\n    onTitleTouchEnd?: eventFunc;\n    onLabelMouseDown?: eventFunc;\n    onLabelMouseMove?: eventFunc;\n    onLabelMouseLeave?: eventFunc;\n    onLabelMouseUp?: eventFunc;\n    onLabelClick?: eventFunc;\n    onLabelDblClick?: eventFunc;\n    onLabelTouchStart?: eventFunc;\n    onLabelTouchMove?: eventFunc;\n    onLabelTouchEnd?: eventFunc;\n    onTicksMouseDown?: eventFunc;\n    onTicksMouseMove?: eventFunc;\n    onTicksMouseLeave?: eventFunc;\n    onTicksMouseUp?: eventFunc;\n    onTicksClick?: eventFunc;\n    onTicksDblClick?: eventFunc;\n    onTicksTouchStart?: eventFunc;\n    onTicksTouchMove?: eventFunc;\n    onTicksTouchEnd?: eventFunc;\n    onLineMouseDown?: eventFunc;\n    onLineMouseMove?: eventFunc;\n    onLineMouseLeave?: eventFunc;\n    onLineMouseUp?: eventFunc;\n    onLineClick?: eventFunc;\n    onLineDblClick?: eventFunc;\n    onLineTouchStart?: eventFunc;\n    onLineTouchMove?: eventFunc;\n    onLineTouchEnd?: eventFunc;\n    onGridMouseDown?: eventFunc;\n    onGridMouseMove?: eventFunc;\n    onGridMouseLeave?: eventFunc;\n    onGridMouseUp?: eventFunc;\n    onGridClick?: eventFunc;\n    onGridDblClick?: eventFunc;\n    onGridTouchStart?: eventFunc;\n    onGridTouchMove?: eventFunc;\n    onGridTouchEnd?: eventFunc;\n}\nexport { Axis };\n"]}