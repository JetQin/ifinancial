import { Chart } from '../Chart';
import * as IStyle from './Style';
import * as ɵngcc0 from '@angular/core';
declare type formatterFunc = (val: string | number) => string | number;
declare type eventFunc = (ev: any, chart: any) => void;
interface ITitle {
    autoRotate?: boolean;
    offset?: number;
    position?: string;
    textStyle?: IStyle.ITextStyle;
}
interface IAxisTick {
    ticks?: number[];
    tickCount?: number;
    tickInterval?: number;
}
interface IAxisGrid {
    zIndex?: number;
    type?: string;
    align?: string;
    lineStyle?: IStyle.ILineStyle;
    line?: IStyle.ILineStyle;
    items?: object[];
    alternateColor?: string | string[];
    matrix?: any;
    hideFirstLine?: boolean;
    hideLastLine?: boolean;
}
interface IAxisLabel {
    density: number;
    offset?: number | number[];
    formatter?: string | formatterFunc;
    autoRotate?: boolean;
    rotate?: number | 'normal' | 'parallel';
    textStyle?: IStyle.ITextStyle;
    htmlTemplate?: (text: any, item: any, index: any) => string;
}
declare class Axis extends Chart {
    dataKey?: string;
    show?: boolean;
    position?: string;
    title?: ITitle;
    tick?: IAxisTick;
    subTick?: IAxisTick;
    grid?: IAxisGrid | null;
    zIndex?: number;
    label?: boolean | IAxisLabel;
    line?: IStyle.ILineStyle;
    tickLine?: IStyle.ILineStyle;
    subTickCount?: number;
    subTickLine?: IStyle.ILineStyle;
    autoPaint?: boolean;
    useHtml?: boolean;
    onTitleMouseDown?: eventFunc;
    onTitleMouseMove?: eventFunc;
    onTitleMouseLeave?: eventFunc;
    onTitleMouseUp?: eventFunc;
    onTitleClick?: eventFunc;
    onTitleDblClick?: eventFunc;
    onTitleTouchStart?: eventFunc;
    onTitleTouchMove?: eventFunc;
    onTitleTouchEnd?: eventFunc;
    onLabelMouseDown?: eventFunc;
    onLabelMouseMove?: eventFunc;
    onLabelMouseLeave?: eventFunc;
    onLabelMouseUp?: eventFunc;
    onLabelClick?: eventFunc;
    onLabelDblClick?: eventFunc;
    onLabelTouchStart?: eventFunc;
    onLabelTouchMove?: eventFunc;
    onLabelTouchEnd?: eventFunc;
    onTicksMouseDown?: eventFunc;
    onTicksMouseMove?: eventFunc;
    onTicksMouseLeave?: eventFunc;
    onTicksMouseUp?: eventFunc;
    onTicksClick?: eventFunc;
    onTicksDblClick?: eventFunc;
    onTicksTouchStart?: eventFunc;
    onTicksTouchMove?: eventFunc;
    onTicksTouchEnd?: eventFunc;
    onLineMouseDown?: eventFunc;
    onLineMouseMove?: eventFunc;
    onLineMouseLeave?: eventFunc;
    onLineMouseUp?: eventFunc;
    onLineClick?: eventFunc;
    onLineDblClick?: eventFunc;
    onLineTouchStart?: eventFunc;
    onLineTouchMove?: eventFunc;
    onLineTouchEnd?: eventFunc;
    onGridMouseDown?: eventFunc;
    onGridMouseMove?: eventFunc;
    onGridMouseLeave?: eventFunc;
    onGridMouseUp?: eventFunc;
    onGridClick?: eventFunc;
    onGridDblClick?: eventFunc;
    onGridTouchStart?: eventFunc;
    onGridTouchMove?: eventFunc;
    onGridTouchEnd?: eventFunc;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Axis, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Axis, "v-axis", never, { "dataKey": "dataKey"; "show": "show"; "position": "position"; "title": "title"; "tick": "tick"; "subTick": "subTick"; "grid": "grid"; "zIndex": "zIndex"; "label": "label"; "line": "line"; "tickLine": "tickLine"; "subTickCount": "subTickCount"; "subTickLine": "subTickLine"; "autoPaint": "autoPaint"; "useHtml": "useHtml"; "onTitleMouseDown": "onTitleMouseDown"; "onTitleMouseMove": "onTitleMouseMove"; "onTitleMouseLeave": "onTitleMouseLeave"; "onTitleMouseUp": "onTitleMouseUp"; "onTitleClick": "onTitleClick"; "onTitleDblClick": "onTitleDblClick"; "onTitleTouchStart": "onTitleTouchStart"; "onTitleTouchMove": "onTitleTouchMove"; "onTitleTouchEnd": "onTitleTouchEnd"; "onLabelMouseDown": "onLabelMouseDown"; "onLabelMouseMove": "onLabelMouseMove"; "onLabelMouseLeave": "onLabelMouseLeave"; "onLabelMouseUp": "onLabelMouseUp"; "onLabelClick": "onLabelClick"; "onLabelDblClick": "onLabelDblClick"; "onLabelTouchStart": "onLabelTouchStart"; "onLabelTouchMove": "onLabelTouchMove"; "onLabelTouchEnd": "onLabelTouchEnd"; "onTicksMouseDown": "onTicksMouseDown"; "onTicksMouseMove": "onTicksMouseMove"; "onTicksMouseLeave": "onTicksMouseLeave"; "onTicksMouseUp": "onTicksMouseUp"; "onTicksClick": "onTicksClick"; "onTicksDblClick": "onTicksDblClick"; "onTicksTouchStart": "onTicksTouchStart"; "onTicksTouchMove": "onTicksTouchMove"; "onTicksTouchEnd": "onTicksTouchEnd"; "onLineMouseDown": "onLineMouseDown"; "onLineMouseMove": "onLineMouseMove"; "onLineMouseLeave": "onLineMouseLeave"; "onLineMouseUp": "onLineMouseUp"; "onLineClick": "onLineClick"; "onLineDblClick": "onLineDblClick"; "onLineTouchStart": "onLineTouchStart"; "onLineTouchMove": "onLineTouchMove"; "onLineTouchEnd": "onLineTouchEnd"; "onGridMouseDown": "onGridMouseDown"; "onGridMouseMove": "onGridMouseMove"; "onGridMouseLeave": "onGridMouseLeave"; "onGridMouseUp": "onGridMouseUp"; "onGridClick": "onGridClick"; "onGridDblClick": "onGridDblClick"; "onGridTouchStart": "onGridTouchStart"; "onGridTouchMove": "onGridTouchMove"; "onGridTouchEnd": "onGridTouchEnd"; }, {}, never, never>;
}
export { Axis };

//# sourceMappingURL=Axis.d.ts.map