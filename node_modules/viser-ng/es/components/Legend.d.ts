import { Chart } from '../Chart';
import * as IStyle from './Style';
import * as ɵngcc0 from '@angular/core';
declare type func = () => void;
declare type formatterFunc = (val: number) => string | number;
declare type eventFunc = (ev: any, chart: any) => void;
interface IBackground {
    stroke?: string;
    strokeOpacity?: number;
    lineWidth?: number;
    fill?: string;
    fillOpactiy?: number;
    radius?: number;
}
declare class Legend extends Chart {
    dataKey?: string;
    show?: boolean;
    position?: string;
    title?: null | object;
    custom?: boolean;
    offset?: number;
    offsetX?: number;
    offsetY?: number;
    items?: object[];
    itemGap?: number;
    titleGap?: number;
    itemMarginBottom?: number;
    itemsGroup?: object[];
    layout?: string;
    allowAllCanceled?: boolean;
    backPadding?: number[];
    itemWidth?: number;
    unCheckColor?: string;
    background?: IBackground;
    itemFormatter?: formatterFunc;
    marker?: string | func;
    textStyle?: IStyle.ITextStyle;
    checkable?: boolean;
    clickable?: boolean;
    hoverable?: boolean;
    useHtml?: boolean;
    autoWrap?: boolean;
    autoPosition?: boolean;
    container?: any;
    containerTpl?: string;
    itemTpl?: string | func;
    selectedMode?: string;
    reversed?: boolean;
    slidable?: boolean;
    width?: number;
    height?: number;
    legendMarker?: any;
    legendListItem?: any;
    legendTitle?: any;
    legendList?: any;
    legendStyle?: any;
    attachLast?: boolean;
    flipPage?: boolean;
    name?: boolean;
    reactive?: boolean;
    sizeType?: string;
    isSegment?: boolean;
    onHover?: eventFunc;
    onClick?: eventFunc;
    onTitleMouseDown?: eventFunc;
    onTitleMouseMove?: eventFunc;
    onTitleMouseLeave?: eventFunc;
    onTitleMouseUp?: eventFunc;
    onTitleClick?: eventFunc;
    onTitleDblClick?: eventFunc;
    onTitleTouchStart?: eventFunc;
    onTitleTouchMove?: eventFunc;
    onTitleTouchEnd?: eventFunc;
    onItemMouseDown?: eventFunc;
    onItemMouseMove?: eventFunc;
    onItemMouseLeave?: eventFunc;
    onItemMouseUp?: eventFunc;
    onItemClick?: eventFunc;
    onItemDblClick?: eventFunc;
    onItemTouchStart?: eventFunc;
    onItemTouchMove?: eventFunc;
    onItemTouchEnd?: eventFunc;
    onMarkerMouseDown?: eventFunc;
    onMarkerMouseMove?: eventFunc;
    onMarkerMouseLeave?: eventFunc;
    onMarkerMouseUp?: eventFunc;
    onMarkerClick?: eventFunc;
    onMarkerDblClick?: eventFunc;
    onMarkerTouchStart?: eventFunc;
    onMarkerTouchMove?: eventFunc;
    onMarkerTouchEnd?: eventFunc;
    onTextMouseDown?: eventFunc;
    onTextMouseMove?: eventFunc;
    onTextMouseLeave?: eventFunc;
    onTextMouseUp?: eventFunc;
    onTextClick?: eventFunc;
    onTextDblClick?: eventFunc;
    onTextTouchStart?: eventFunc;
    onTextTouchMove?: eventFunc;
    onTextTouchEnd?: eventFunc;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Legend, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Legend, "v-legend", never, { "dataKey": "dataKey"; "show": "show"; "position": "position"; "title": "title"; "custom": "custom"; "offset": "offset"; "offsetX": "offsetX"; "offsetY": "offsetY"; "items": "items"; "itemGap": "itemGap"; "titleGap": "titleGap"; "itemMarginBottom": "itemMarginBottom"; "itemsGroup": "itemsGroup"; "layout": "layout"; "allowAllCanceled": "allowAllCanceled"; "backPadding": "backPadding"; "itemWidth": "itemWidth"; "unCheckColor": "unCheckColor"; "background": "background"; "itemFormatter": "itemFormatter"; "marker": "marker"; "textStyle": "textStyle"; "checkable": "checkable"; "clickable": "clickable"; "hoverable": "hoverable"; "useHtml": "useHtml"; "autoWrap": "autoWrap"; "autoPosition": "autoPosition"; "container": "container"; "containerTpl": "containerTpl"; "itemTpl": "itemTpl"; "selectedMode": "selectedMode"; "reversed": "reversed"; "slidable": "slidable"; "width": "width"; "height": "height"; "legendMarker": "legendMarker"; "legendListItem": "legendListItem"; "legendTitle": "legendTitle"; "legendList": "legendList"; "legendStyle": "legendStyle"; "attachLast": "attachLast"; "flipPage": "flipPage"; "name": "name"; "reactive": "reactive"; "sizeType": "sizeType"; "isSegment": "isSegment"; "onHover": "onHover"; "onClick": "onClick"; "onTitleMouseDown": "onTitleMouseDown"; "onTitleMouseMove": "onTitleMouseMove"; "onTitleMouseLeave": "onTitleMouseLeave"; "onTitleMouseUp": "onTitleMouseUp"; "onTitleClick": "onTitleClick"; "onTitleDblClick": "onTitleDblClick"; "onTitleTouchStart": "onTitleTouchStart"; "onTitleTouchMove": "onTitleTouchMove"; "onTitleTouchEnd": "onTitleTouchEnd"; "onItemMouseDown": "onItemMouseDown"; "onItemMouseMove": "onItemMouseMove"; "onItemMouseLeave": "onItemMouseLeave"; "onItemMouseUp": "onItemMouseUp"; "onItemClick": "onItemClick"; "onItemDblClick": "onItemDblClick"; "onItemTouchStart": "onItemTouchStart"; "onItemTouchMove": "onItemTouchMove"; "onItemTouchEnd": "onItemTouchEnd"; "onMarkerMouseDown": "onMarkerMouseDown"; "onMarkerMouseMove": "onMarkerMouseMove"; "onMarkerMouseLeave": "onMarkerMouseLeave"; "onMarkerMouseUp": "onMarkerMouseUp"; "onMarkerClick": "onMarkerClick"; "onMarkerDblClick": "onMarkerDblClick"; "onMarkerTouchStart": "onMarkerTouchStart"; "onMarkerTouchMove": "onMarkerTouchMove"; "onMarkerTouchEnd": "onMarkerTouchEnd"; "onTextMouseDown": "onTextMouseDown"; "onTextMouseMove": "onTextMouseMove"; "onTextMouseLeave": "onTextMouseLeave"; "onTextMouseUp": "onTextMouseUp"; "onTextClick": "onTextClick"; "onTextDblClick": "onTextDblClick"; "onTextTouchStart": "onTextTouchStart"; "onTextTouchMove": "onTextTouchMove"; "onTextTouchEnd": "onTextTouchEnd"; }, {}, never, never>;
}
export { Legend };

//# sourceMappingURL=Legend.d.ts.map